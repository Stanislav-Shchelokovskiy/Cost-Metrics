version: '3.4'

x-cost_metrics:
  &cost_metrics
  image: shchelokovskiy/cost_metrics:latest
  restart: always
  environment:
    - SQL_SERVER
    - SQL_DATABASE
    - SQL_USER
    - SQL_PASSWORD
    - WF_LOGIN_HEADER
    - WF_LOGIN_PASSWORD
    - WF_LOGIN
    - WF_PASSWORD
    - WF_ENDPOINT
    - CORS_ORIGINS
    - QUERY_SERVICE
    - REDIS_SERVICE=cost_metrics_redis
    - REDIS_PORT
    - REDIS_DB
    - ADMIN_ROLE
    - ADVANCED_ROLE
    - CELERY_BROKER_URL=redis://cost_metrics_redis:6379/0
    - CELERY_RESULT_BACKEND=redis://cost_metrics_redis:6379/0
    - SQLITE_DATABASE=${DB_HOME}/db
    - LD_LIBRARY_PATH=/usr/lib #https://stackoverflow.com/questions/49920444/upgrading-sqlite3-version-used-in-python3-on-linux
    - PRODUCTION
    - RECALCULATE_FROM_THE_BEGINNING

services:
  cost_metrics_dashboard:
    <<: *cost_metrics
    hostname: cost_metrics_dashboard
    container_name: cost_metrics_dashboard
    command: celery --app=worker flower --url_prefix=CostMetricsDash --port=5555
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:5555/CostMetricsDash/healthcheck"
        ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    expose:
      - "5555"
    depends_on:
      cost_metrics_redis:
        condition: service_healthy

  cost_metrics_worker:
    <<: *cost_metrics
    hostname: cost_metrics_worker
    container_name: cost_metrics_worker
    command: celery --app=worker worker --beat --loglevel=INFO --concurrency=7
    volumes:
      - cost_metrics-volume:${DB_HOME}
    depends_on:
      cost_metrics_redis:
        condition: service_healthy
      cost_metrics_dashboard:
        condition: service_healthy

  cost_metrics_server:
    <<: *cost_metrics
    hostname: cost_metrics_server
    container_name: cost_metrics_server
    command: uvicorn server:app --host 0.0.0.0 --port 80 --log-level critical
    expose:
      - "80"
    volumes:
      - cost_metrics-volume:${DB_HOME}

  cost_metrics_redis:
    image: redis/redis-stack-server:latest
    hostname: cost_metrics_redis
    container_name: cost_metrics_redis
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    volumes:
      - cost_metrics-volume:/data

volumes:
  cost_metrics-volume:


networks:
  default:
    name: support_analytics
    external: true
